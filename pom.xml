<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.pankratzlab</groupId>
	<artifactId>donorcheck</artifactId>
	<!-- if version number changes, be sure to update in project.properties file also -->
	<version>1.1.15</version>
	<packaging>jar</packaging>

	<description>A stand-alone tool for validating DonorNet typing entries.</description>
	<inceptionYear>2018</inceptionYear>
	<organization>
		<name>Division of Computational Pathology, University of Minnesota</name>
		<url>https://www.pathology.umn.edu/computational-pathology</url>
	</organization>
	<developers>
		<developer>
			<id>hinerm</id>
			<name>Mark Hiner</name>
			<email>hine0116@umn.edu</email>
		</developer>
		<developer>
			<id>kaitlinrenee</id>
			<name>Kaitlin Clarke</name>
			<email>krclarke@umn.edu</email>
		</developer>
		<developer>
			<id>rcoleb</id>
			<name>Ben Cole</name>
			<email>cole0482@umn.edu</email>
		</developer>
	</developers>


	<repositories>
		<repository>
			<id>central</id>
			<url>https://repo1.maven.org/maven2</url>
		</repository>
		<repository>
			<id>github-donor-check</id>
			<url>https://maven.pkg.github.com/PankratzLab/DonorCheck</url>
		</repository>
	</repositories>

	<distributionManagement>
		<repository>
			<id>github-donor-check</id>
			<url>https://maven.pkg.github.com/PankratzLab/DonorCheck</url>
		</repository>
	</distributionManagement>

	<scm>
		<connection>scm:git:git://github.com/PankratzLab/DonorCheck</connection>
		<developerConnection>scm:git:git@github.com:PankratzLab/DonorCheck</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/PankratzLab/DonorCheck</url>
	</scm>

	<properties>
		<outname>DonorCheck</outname>
		<appName>DonorCheck</appName>
		<copyright>(c)2024 Computational Pathology - University of Minnesota, GNU General Public License, v2</copyright>
		<configuration-vendor>Division of Computational Pathology, UMTC</configuration-vendor>
		<mainClass>org.pankratzlab.unet.jfx.TypeValidationEntry</mainClass>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Controls the Java and Maven compliance versions -->
		<maven.compiler.source>21</maven.compiler.source>
		<maven.compiler.target>21</maven.compiler.target>
		<app.dir>${project.build.directory}/app</app.dir>
		<resources.dir>${project.basedir}/src/main/resources/</resources.dir>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.pankratzlab</groupId>
			<artifactId>BackgroundDataProcessor-java11</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-model</artifactId>
			<version>3.3.9</version>
		</dependency>
		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.8.3</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>33.2.1-jre</version>
		</dependency>
		<dependency>
			<groupId>org.apache.pdfbox</groupId>
			<artifactId>pdfbox</artifactId>
			<version>2.0.15</version>
		</dependency>
		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>controlsfx</artifactId>
			<version>8.40.14</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-csv</artifactId>
			<version>1.5</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.5</version>
		</dependency>
		<!-- dependency used for XLSX file format -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.16</version>
		</dependency>
		<!-- dependency used for XLS older file format (added for information) -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.16</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>ooxml-schemas</artifactId>
			<version>1.3</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.18.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.18.0</version>
		</dependency>
		<!-- Test scope dependencies - not included in .jars built with Maven -->
		<!-- JUnit - http://junit.org/ -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.4.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.4.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-params</artifactId>
			<version>5.4.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<version>5.4.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-launcher</artifactId>
			<version>1.4.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-runner</artifactId>
			<version>1.4.2</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.27.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>22.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>22.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-graphics</artifactId>
			<version>22.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-base</artifactId>
			<version>22.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-swing</artifactId>
			<version>22.0.2</version>
		</dependency>
	</dependencies>


	<build>

		<!-- The pluginManagement block controls plugin configuration in all modules -->
		<pluginManagement>
			<plugins>
				<!-- clean lifecycle, see
				https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.4.0</version>
				</plugin>
				<!-- default lifecycle, jar packaging: see
				https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.3.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.13.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.3.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>
				<!-- site lifecycle, see
				https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.12.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-project-info-reports-plugin</artifactId>
					<version>3.6.2</version>
				</plugin>
				<!-- Exec Maven plugin -
				http://www.mojohaus.org/exec-maven-plugin/ This 
			plugin launches a Java class using Maven. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>3.3.0</version>
				</plugin>
				<plugin>
					<groupId>com.github.akman</groupId>
					<artifactId>jpackage-maven-plugin</artifactId>
					<version>0.1.5</version>
				</plugin>
				<!--
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.4.0</version>
				</plugin>

				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.4.0</version>
				</plugin>

				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>

				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>

				<plugin>
					<artifactId>maven-plugin-plugin</artifactId>
					<version>3.3</version>
				</plugin>

				<plugin>
					<artifactId>maven-release-plugin</artifactId>
					<version>3.0.1</version>
				</plugin>

				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.3.1</version>
				</plugin>

				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.12.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.3.1</version>
				</plugin>
				

				 Exec Maven plugin - http://www.mojohaus.org/exec-maven-plugin/ This 
					plugin launches a Java class using Maven. 
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.3.1</version>
				</plugin>


				<plugin>
					<groupId>com.github.akman</groupId>
					<artifactId>jpackage-maven-plugin</artifactId>
					<version>0.1.5</version>
				</plugin>-->
			</plugins>
		</pluginManagement>


	</build>
	<profiles>
		<profile>
			<id>jar-with-dependencies</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
					</resource>
				</resources>
				<plugins>
					<!-- 
						DonorCheck uses the Maven Assembly plugin to create a 'fat jar', 
						i.e. a jar file with all necessary dependency libraries included inside of it. 
						Because other applications don't depend on DonorCheck as a library, 
						the Maven Assembly plugin is more appropriate to use rather than the Maven Shade plugin. 
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<finalName>${project.artifactId}</finalName>
							<archive>
								<manifest>
									<mainClass>${mainClass}</mainClass>
								</manifest>
								<manifestEntries>
									<!-- Add SCM revision from buildnumber plugin, if available. -->
									<Implementation-Title>Revision</Implementation-Title>
									<Implementation-Version>${buildNumber}</Implementation-Version>
									<!-- Add a formatted timestamp for the build. -->
									<Specification-Title>DonorCheck</Specification-Title>
									<Specification-Version>${project.version}</Specification-Version>
									<Compile-Time>${timestamp}</Compile-Time>
									<Build-Type>Development</Build-Type>
									<Implementation-Vendor>(c)2024 Computational Pathology - University of Minnesota, GNU General Public License, v2</Implementation-Vendor>
								</manifestEntries>
							</archive>
							<!-- this tag tells the plugin to include all of the dependencies in the jar -->
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<!-- this tag tells the plugin to not append "jar-with-dependencies" to the created filename -->
							<appendAssemblyId>false</appendAssemblyId>
							<!-- 
								this tells the plugin to put the created jar in a specific 
								subdirectory, away from other files, so that later the 
								jpackage plugin can bundle just this directory.
						 	-->
							<outputDirectory>target/package/</outputDirectory>
						</configuration>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- This profile is used to create an installer for new releases -->
			<id>jfx-installer</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.akman</groupId>
						<artifactId>jpackage-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>create-jfxjar</id>
								<phase>install</phase>
								<goals>
									<goal>jpackage</goal>
								</goals>
								<configuration>
									<!-- 
										NB: 'appname' and 'appName' are *NOT* the same value!
										For DonorCheck, 'appname' is 'TypeValidationEntry', while
										'appName' is 'DonorCheck'.
									-->
									<name>${appName}</name>
									<!-- Enable adding the application to the system menu. -->
									<winmenu>true</winmenu>
									<!-- Enable creating a desktop shortcut for the application. -->
									<winshortcut>true</winshortcut>
									<!-- 
										Enable requesting to perform an install on a per-user basis. 
										Removes the need for admin privileges / installs the application 
										to the AppData directory. 
									-->
									<winperuserinstall>true</winperuserinstall>
									<appversion>${project.version}</appversion>
									<vendor>${configuration-vendor}</vendor>
									<icon>${project.basedir}/src/main/resources/icon.ico</icon>
									<javaoptions>-Xmx1g -Xms256m</javaoptions>
									<mainclass>${mainClass}</mainclass>

									<!-- 
										enable this flag to show a cmd console when running TiterCalc; 
										somewhat useful for debugging the exe-to-jar process, but doesn't 
										show java errors / exception output 
									-->
									<!--<winconsole>true</winconsole>-->

									<!-- Start menu group this application is placed in. -->
									<winmenugroup>HLA-Suite</winmenugroup>

									<!-- location of files to be included in the EXE/installer -->
									<input>target/package/</input>

									<!-- Main jar to be run; path is relative to input directory above -->
									<mainjar>${project.artifactId}.jar</mainjar>

									<temp>wix</temp>

									<copyright>${copyright}</copyright>
									<verbose>true</verbose>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- This profile is enabled automatically when building with a 32-bit JVM -->
			<id>32bitstuff</id>
			<activation>
				<property>
					<name>sun.arch.data.model</name>
					<value>32</value>
				</property>
			</activation>
			<properties>
				<winVer>win86</winVer>
			</properties>
		</profile>

		<profile>
			<!-- This profile is enabled automatically when building with a 64-bit JVM -->
			<id>64bitstuff</id>
			<activation>
				<property>
					<name>sun.arch.data.model</name>
					<value>64</value>
				</property>
			</activation>
			<properties>
				<winVer>win64</winVer>
			</properties>
		</profile>
	</profiles>

</project>
